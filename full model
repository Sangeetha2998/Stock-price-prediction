import yfinance as yf
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.preprocessing import MinMaxScaler
from keras.models import Sequential
from keras.layers import LSTM, Dense


symbol = input("Enter the stock symbol: ")
stock_data = yf.download(symbol, period='5y')

if stock_data.empty:
    print(f"Error: Could not retrieve data for symbol '{symbol}'. Please check the symbol and try again.")
else:
    stock_data['SMA'] = stock_data['Close'].rolling(window=20).mean()
    stock_data['SD'] = stock_data['Close'].rolling(window=20).std()
    stock_data['UB'] = stock_data['SMA'] + 2 * stock_data['SD']
    stock_data['LB'] = stock_data['SMA'] - 2 * stock_data['SD']

    stock_data['Above UB'] = stock_data['Close'] > stock_data['UB']
    stock_data['Below LB'] = stock_data['Close'] < stock_data['LB']

    fig, ax1 = plt.subplots(figsize=(12, 6))
    ax1.plot(stock_data.index, stock_data['Close'], label='Close Price', color='blue')
    ax1.plot(stock_data.index, stock_data['SMA'], label='SMA', color='orange')
    ax1.plot(stock_data.index, stock_data['UB'], label='Upper Bollinger Band', color='red')
    ax1.plot(stock_data.index, stock_data['LB'], label='Lower Bollinger Band', color='green')


    ax1.scatter(stock_data.index[stock_data['Above UB']], stock_data['Close'][stock_data['Above UB']],
                marker='^', color='red', s=100, label='Above Upper Band')
    ax1.scatter(stock_data.index[stock_data['Below LB']], stock_data['Close'][stock_data['Below LB']],
                marker='v', color='green', s=100, label='Below Lower Band')

    # Setting y-axis labels
    ax1.set_yticks(np.arange(0, stock_data['Close'].max() if not np.isnan(stock_data['Close'].max()) else 1, 50)) # Set a default max value if stock_data['Close'].max() is nan.
    ax1.set_ylabel('Price')

    ax1.legend(loc='best')

    ax2 = ax1.twinx()
    ax2.fill_between(stock_data.index, stock_data['Volume'], color='black', alpha=0.3)
    ax2.set_ylabel('Volume', color='gray')
    ax2.tick_params(axis='y', labelcolor='gray')
    plt.title(f'Bollinger Bands for {symbol}')
    plt.show()



    scaler = MinMaxScaler()
    scaled_data = scaler.fit_transform(stock_data['Close'].values.reshape(-1, 1))

    # Split data into training and testing sets
    train_size = int(len(scaled_data) * 0.8)
    train_data, test_data = scaled_data[0:train_size], scaled_data[train_size:]

    # Create LSTM model
    model = Sequential()
    model.add(LSTM(50, input_shape=(1, 1)))
    model.add(Dense(1))
    model.compile(loss='mean_squared_error', optimizer='adam')

    # Reshape data for LSTM
    X_train = []
    y_train = []
    for i in range(20, len(train_data)):
        X_train.append(train_data[i-20:i, 0])
        y_train.append(train_data[i, 0])
    X_train, y_train = np.array(X_train), np.array(y_train)
    X_train = np.reshape(X_train, (X_train.shape[0], X_train.shape[1], 1))

    # Train model
    model.fit(X_train, y_train, epochs=50, batch_size=32, verbose=2)

    # Make predictions
    X_test = []
    for i in range(20, len(test_data)):
        X_test.append(test_data[i-20:i, 0])
    X_test = np.array(X_test)
    X_test = np.reshape(X_test, (X_test.shape[0], X_test.shape[1], 1))
    predictions = model.predict(X_test)

    # Predict next day's closing price
    last_20_days = scaled_data[-20:]
    last_20_days = np.reshape(last_20_days, (1, 20, 1))
    next_day_prediction = model.predict(last_20_days)
    next_day_prediction = scaler.inverse_transform(next_day_prediction)

    print(f"Predicted closing price for next day: {next_day_prediction[0][0]:.2f}")

    # Plot predicted closing price for September 9th, 2024
    plt.plot(['Next Day'], [next_day_prediction[0][0]], marker='o')
    plt.xlabel('Date')
    plt.ylabel('Closing Price')
    plt.title('Predicted Closing Price for next day')
    plt.show()
